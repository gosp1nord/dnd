(()=>{"use strict";class e{constructor(e,t){this.belowBlockTask=void 0,this.actualBlockTask=void 0,this.elementOffsetX=0,this.elementOffsetY=0,this.elementClose=e,this.manager=t,this.elementBlocksTask=document.querySelectorAll(".block-task"),this.moveElement=this.moveElement.bind(this),this.finishDrag=this.finishDrag.bind(this),this.createBelowArea=this.createBelowArea.bind(this),this.setArea=this.setArea.bind(this),this.startDrag=this.startDrag.bind(this)}startDrag(e){e.preventDefault(),e.target.classList.contains("close")||(this.actualBlockTask=e.target.closest(".block-task"),this.actualBlockTask.classList.remove("block-task-onpoint"),this.actualBlockTask.querySelector(".close").hidden=!0,document.addEventListener("mousemove",this.moveElement),this.actualBlockTask.addEventListener("mouseup",this.finishDrag),this.elementOffsetY=e.offsetY,this.elementOffsetX=e.offsetX,this.actualBlockTask.style.top=this.actualBlockTask.getBoundingClientRect().top-12+"px",this.actualBlockTask.style.left=`${this.actualBlockTask.getBoundingClientRect().left}px`,this.actualBlockTask.classList.remove("for-grab"),this.actualBlockTask.classList.add("grabbed"))}finishDrag(){if(document.removeEventListener("mousemove",this.moveElement),this.actualBlockTask.removeEventListener("mouseup",this.finishDrag),this.belowBlockTask&&this.belowBlockTask.closest(".block-area")){if(this.areaElement=this.belowBlockTask.closest(".block-area"),this.areaElement.classList.contains("afterend")?(this.targetPoint="afterend",this.parentElement=this.areaElement.previousElementSibling):(this.targetPoint="beforebegin",this.parentElement=this.areaElement.nextElementSibling),!this.parentElement)return;this.parentElement.insertAdjacentHTML(this.targetPoint,`\n        <div class="block-task for-grab block-task-onpoint new_element">\n          <div class="task-text">${this.actualBlockTask.querySelector(".task-text").textContent}</div>\n          <div class="close">&#215;</div>\n        </div>\n      `),this.newElement=document.querySelector(".new_element"),this.newElement.addEventListener("mousedown",this.startDrag),this.newElement.querySelector(".close").addEventListener("click",this.elementClose.dellCard),this.newElement.classList.remove("new_element"),this.actualBlockTask.parentNode.removeChild(this.actualBlockTask),this.areaElement.parentNode.removeChild(this.areaElement),this.manager.saveColumns()}else this.actualBlockTask.classList.add("for-grab"),this.actualBlockTask.classList.remove("grabbed"),this.actualBlockTask.classList.add("block-task-onpoint"),this.actualBlockTask.querySelector(".close").hidden=!1,this.area=document.querySelector(".block-area"),this.area&&this.area.parentNode.removeChild(this.area)}moveElement(e){this.actualBlockTask.style.top=e.clientY-this.elementOffsetY-12+"px",this.actualBlockTask.style.left=e.clientX-this.elementOffsetX+"px",this.belowBlockTask=void 0,this.area=document.querySelector(".block-area"),this.actualBlockTask.hidden=!0,this.elementbelow=document.elementFromPoint(e.clientX,e.clientY),this.actualBlockTask.hidden=!1,this.elementbelow.closest(".block-area")?this.belowBlockTask=this.elementbelow.closest(".block-area"):(this.area&&this.area.parentNode.removeChild(this.area),(this.elementbelow.closest(".block-task")||this.elementbelow.closest(".block-add"))&&this.createBelowArea(e.clientY))}createBelowArea(e){if(this.elementbelow.closest(".block-add"))return this.belowBlockTask=this.elementbelow.closest(".block-add"),void this.setArea("beforebegin");this.belowBlockTask=this.elementbelow.closest(".block-task"),this.element=this.belowBlockTask.getBoundingClientRect(),this.middlePoint=this.element.top+this.element.height/2,e>this.middlePoint?this.setArea("afterend"):this.setArea("beforebegin")}setArea(e){this.belowBlockTask.insertAdjacentHTML(e,`\n      <div class='block-area ${e}'><div class='area'></div></div>\n    `)}}class t{constructor(e){this.dellCard=this.dellCard.bind(this),this.manager=e}dellCard(e){this.elementDell=e.target.closest(".block-task"),this.elementDell.classList.contains("element-input")&&(this.btnSave=this.elementDell.parentNode.querySelector(".save"),this.btnSave&&this.btnSave.classList.add("hidd")),this.elementDell.parentNode.removeChild(this.elementDell),this.manager.saveColumns()}}class s{constructor(e,t,s){this.elementDragDrop=e,this.elementClose=t,this.manager=s,this.addCard=this.addCard.bind(this),this.saveTask=this.saveTask.bind(this)}addCard(e){e.preventDefault(),this.blockAdd=e.target.closest(".block-add"),this.blockAdd.previousElementSibling.classList.contains("element-input")||(this.blockAdd.insertAdjacentHTML("beforebegin","\n      <div class=\"block-task for-grab block-task-onpoint element-input\">\n        <input type='text' class='input-new-task'>\n        <div class=\"close\">&#215;</div>\n      </div>\n    "),this.blockAdd.previousElementSibling.querySelector(".close").addEventListener("click",this.elementClose.dellCard),this.blockAdd.querySelector(".save").classList.remove("hidd"),this.blockAdd.querySelector(".save").addEventListener("click",this.saveTask))}saveTask(e){this.newElementCard=e.target.closest(".column").querySelector(".element-input"),this.newElementCard&&(this.textInputElement=this.newElementCard.querySelector(".input-new-task"),this.textInputElement.value&&(this.newElementTextTask=document.createElement("div"),this.newElementTextTask.setAttribute("class","task-text"),this.newElementTextTask.innerText=this.textInputElement.value,this.newElementCard.insertAdjacentElement("afterbegin",this.newElementTextTask),this.textInputElement.parentNode.removeChild(this.textInputElement),this.newElementCard.classList.remove("element-input"),this.newElementCard.addEventListener("mousedown",this.elementDragDrop.startDrag),e.target.removeEventListener("click",this.saveTask),e.target.classList.add("hidd"),this.manager.saveColumns()))}}class l{constructor(){this.arrColumns=[],this.arrDefault=[["Выполнить","Полить цветы","Выкопать кактус","Заколотить дверь в туалет соседа"],["В процессе","Приготовить завтрак на троих"],["Выполнено","Покрасить соседского кота в оранжевый","Уничтожить остатки краски","Подбросить кисточку вышибале ночного клуба, который живет напротив"]]}saveColumns(){this.columns=document.querySelectorAll(".column"),this.columns.forEach((e=>{this.arrText=[],this.arrText.push(e.querySelector(".block-title").textContent),this.elementsTask=e.querySelectorAll(".task-text"),this.elementsTask.forEach((e=>{"Добавить карточку"!==e.textContent&&this.arrText.push(e.textContent)})),this.arrColumns.push(this.arrText)})),localStorage.setItem("columns",JSON.stringify(this.arrColumns)),this.arrColumns=[]}renderColumns(){this.arrColumns=JSON.parse(window.localStorage.getItem("columns")),this.arrColumns&&0!==this.arrColumns.length||(this.arrColumns=this.arrDefault),this.desk=document.querySelector(".desk"),this.arrColumns.forEach((e=>{this.newColumn=document.createElement("div"),this.newColumn.setAttribute("class","column"),this.newColumn.innerHTML=`<div class="block-title">${e.shift()}</div>`,e.forEach((e=>{this.newColumn.insertAdjacentHTML("beforeend",`\n          <div class="block-task block-task-onpoint for-grab">\n            <div class="task-text">${e}</div>\n            <div class="close">&#215;</div>\n          </div>\n        `)})),this.newColumn.insertAdjacentHTML("beforeend",'\n        <div class="block-add">\n          <div class="add">\n            <div class="plus">&#43;</div>\n            <div class="task-text">Добавить карточку</div>\n          </div>\n          <div class="save hidd">Save</div>\n        </div>\n      '),this.desk.insertAdjacentElement("beforeend",this.newColumn)})),this.arrColumns=[]}}document.addEventListener("DOMContentLoaded",(()=>{const a=new l,i=new t(a),n=new e(i,a),o=new s(n,i,a);a.renderColumns(),document.querySelectorAll(".block-task").forEach((e=>{e.addEventListener("mousedown",n.startDrag)})),document.querySelectorAll(".close").forEach((e=>{e.addEventListener("click",i.dellCard)})),document.querySelectorAll(".add").forEach((e=>{e.addEventListener("click",o.addCard)}))}))})();